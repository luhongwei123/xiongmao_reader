def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


android {
    compileSdkVersion 28

    
    signingConfigs {
        debug {
            keyAlias 'android.keystore'
            keyPassword 'Aa567654112'
            storeFile file('key/android.keystore')
            storePassword 'Aa567654112'
        }
        release {
            keyAlias 'android.keystore'
            keyPassword 'Aa567654112'
            storeFile file('key/android.keystore')
            storePassword 'Aa567654112'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.example.xiongmao_reader"
        manifestPlaceholders = [
                AMAP_KEY : "8c25000207844e854f51e67a8322ecca", 
                JPUSH_PKGNAME : 'com.example.xiongmao_reader',
                JPUSH_APPKEY : "22e426a797b7f93092bf009a", // NOTE: JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL : "theChannel", //暂时填写默认值即可.
        ]
        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。消息推送需要用到 根据情况选择
            abiFilters 'armeabi', 'armeabi-v7a' ,'x86', 'x86_64', 'mips', 'mips64' ,'arm64-v8a'
        }
        minSdkVersion 17
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'com.amap.api:location:latest.integration'
}
